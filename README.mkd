This is a sample application for IoT SDK: [ebisu](https://github.com/KiiPlatform/ebisu) running on Raspberry Pi.
This sample updates temperature from sensor to kii cloud, and waiting command to turn on/off led.
## Used Hardware
- Raspberry Pi Zero W Rev 1.1 (confirmed)
- Humidity/Temperature sensor [DHT11 module](https://www.mouser.com/ds/2/758/DHT11-Technical-Data-Sheet-Translated-Version-1143054.pdf)
## Setup Pi
Note: You should be already installed linux OS image to SD card of your Raspberry Pi.
It is not the scope of this README about how to prepare a SD card.


### connect to Pi via serial console
Note that you can connect to Pi with other ways, like usb keyboard and monitor.
Use serial console is convenient.
Please check the manual about how to do it, [Using A Console Cable to Troubleshoot](https://learn.adafruit.com/raspberry-pi-zero-creation/give-it-life)
Additionaly, you need to add the following line to Raspbian boot image `/boot/config.txt`

```
enable_uart=1
```

The connected Pins is like the following 2 images:
![Image 1: connected serial cable](images/raspberry_pi_cable_connection_crop.jpg)
![Image 2: connected serial cable](images/raspberry_pi_gpio_connection.jpg)

In your ternimal console of PC:

```
# In mac with 115200 communication bit rate
screen /dev/cu.SLAB_USBtoUART 115200
```

### install the necessary development package to compile source code

- install build-essential
  ```
  sudo apt-get install build-essential
  ```
- install libssl
  ```
  sudo apt-get install libssl-dev
  ```
- install cmake
  ```
  sudo apt-get install cmake
  ```
  the version of `cmake` is required to be at least `3.5`. So if the version of cmake in your OS is lower than it. You should consider to build cmake from source. You can try the following script to build cmake from source:

  ```
    sudo apt-get remove cmake
    wget https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.sh
    sudo bash cmake-3.10.2-Linux-x86_64.sh --skip-license --exclude-subdir --prefix=/usr/local

  ```
- install wiringpi, library for gpio control
  ```
  sudo apt-get purge wiringpi
  ```
### Pin numbering described in this README
GPIO BCM Pi number is used. Please check this official document about [gpio of Raspberry Pi](https://www.raspberrypi.org/documentation/usage/gpio/)

## Build sample

```sh
make exampleap
```

## How to use

### Configure Environment
This requires `tio` already generated by last step.

- setup `LD_LIBRARY_PATH` to find `tio`
  ```
  export LD_LIBRARY_PATH=./build-sdk/usr/local/lib
  ```

### onboard a new thing in Developer Portal
Onboard with the following values:
- thing-type: AirConditioner
- firmware-version: 1.0

### start up thing
```sh
./exampleapp onboard --vendor-thing-id={vendor-thing-id} --password={password}
```
